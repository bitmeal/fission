name: Run Tests

# do not run automatically
on:
  workflow_call:
  workflow_dispatch:


jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [alpine, debian, ubuntu, opensuse , fedora, redhat-ubi8, almalinux, rockylinux, amazonlinux]
        init:     [true, false]
        arch:     [amd64, arm64]
        experimental: [false]
    # require only amd64 and tini in container to pass
    continue-on-error: ${{ matrix.experimental || matrix.arch == 'arm64' || matrix.init }}
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
    - 
      name: Fetch Dependencies
      run: sudo apt install -qq -y jq moreutils
    - 
      name: Clone
      uses: actions/checkout@v2
    - 
      name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - 
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
          driver-opts: network=host
    - 
      # allow step to fail; image will not be reused but be built locally
      name: Fetch and restore buildx cache from artifact
      uses: actions/download-artifact@v2
      with:
        name: buildx-cache-${{ hashFiles('Dockerfile') }}
        path: /tmp/buildx-cache
    -
      name: Rebuild base images for [amd64][arm64] from CACHE and push to local registry
      uses: docker/build-push-action@v2
      with:
        context: .
        tags: localhost:5000/fission/fission:base
        platforms: linux/amd64,linux/arm64
        cache-from: type=local,src=/tmp/buildx-cache
        push: true
    -
      name: "Setup test image buildx caching using github cache [${{ matrix.platform }}][${{ matrix.arch }}]"
      if: ${{ ! endsWith(github.event.head_commit.message, '[nocache]') && ! endsWith(github.event.head_commit.message, '[no-cache]') }}
      uses: actions/cache@v2
      with:
        path: /tmp/${{ matrix.platform }}-${{ matrix.arch }}-buildx-cache
        key: ${{ matrix.platform }}-${{ matrix.arch }}-buildx-cache-${{ hashFiles(format('test/platforms/{0}/Dockerfile', matrix.platform)) }}
        restore-keys: |
          ${{ matrix.platform }}-${{ matrix.arch }}-buildx-cache-
    -
      name: "Build and load test image: [${{ matrix.platform }}][${{ matrix.arch }}]"
      timeout-minutes: 10
      uses: docker/build-push-action@v2
      with:
        context: ./test/platforms/${{ matrix.platform }}
        build-args: FISSION_BASE=localhost:5000/fission/fission:base
        tags: fission:${{ matrix.platform }}
        platforms: linux/${{ matrix.arch }}
        load: true
        cache-from: type=local,src=/tmp/${{ matrix.platform }}-${{ matrix.arch }}-buildx-cache
        cache-to: type=local,dest=/tmp/${{ matrix.platform }}-${{ matrix.arch }}-buildx-cache-new,mode=max
    -
      name: "Move buildx cache [${{ matrix.platform }}][${{ matrix.arch }}]"
      run: |
        rm -rf /tmp/${{ matrix.platform }}-${{ matrix.arch }}-buildx-cache
        mv /tmp/${{ matrix.platform }}-${{ matrix.arch }}-buildx-cache-new /tmp/${{ matrix.platform }}-${{ matrix.arch }}-buildx-cache
    - 
      name: Run Tests [${{ matrix.arch }}]
      timeout-minutes: 10
      working-directory: test
      env:
        FISSION_PLATFORM: ${{ matrix.platform }}
        FISSION_ARCH: linux/${{ matrix.arch }}
        FISSION_DOCKER_INIT: ${{ matrix.init }}
      run: ./test.bash -t
    - 
      name: "Prepare status artifact [${{ matrix.platform }}][init: ${{ matrix.init }}][arch: ${{ matrix.arch }}] ([status_${{ matrix.arch }}_init-${{ matrix.init }}])"
      if: ${{ always() }}
      run: |
        mkdir -p status &&
        echo '{}' | jq --arg job "${{ matrix.platform }}" '. + {job: $job}' > status/${{ matrix.platform }}.json
    - 
      name: Finalize status artifact @success
      if: ${{ success() }}
      run: |
        cat status/${{ matrix.platform }}.json | jq --argjson success true '. + {success: $success}' | sponge status/${{ matrix.platform }}.json
    - 
      name: Finalize status artifact @failure
      if: ${{ failure() }}
      run: |
        cat status/${{ matrix.platform }}.json | jq --argjson success false '. + {success: $success}' | sponge status/${{ matrix.platform }}.json
    - 
      name: Add ${{ matrix.platform }}.json to status artifact [status_${{ matrix.arch }}_init-${{ matrix.init }}]
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v2
      with:
        name: status_${{ matrix.arch }}_init-${{ matrix.init }}
        path: status/




